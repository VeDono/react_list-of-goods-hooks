{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Initial","sortedBy","setSortedBy","isReversed","setIsReversed","resetBtnCondition","visibleGoods","goods","preparedGoods","map","good","id","crypto","randomUUID","name","length","sort","goodFirst","goodSecond","localeCompare","reverse","getPreparedGoods","className","type","cn","Alphabet","onClick","Length","ReactDOM","render","document","getElementById"],"mappings":"6KAaKA,E,6EAAAA,K,WAAAA,E,gBAAAA,E,iBAAAA,M,KAME,IAAMC,EAA0B,CACrC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAoCK,IAAMC,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,SAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAqB,GAAzD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAoBJ,GAAYE,EAEhCG,EAvCR,SACEC,EACAN,EACAE,GAEA,IAAMK,EAAgCD,EAAME,KAAI,SAACC,GAAD,MAAW,CACzDC,GAAIC,OAAOC,aACXC,KAAMJ,EACNK,OAAQL,EAAKK,WAsBf,OAnBId,GACFO,EAAcQ,MAAK,SAACC,EAAWC,GAC7B,OAAQjB,GACN,IAAK,OACH,OAAOgB,EAAUhB,GAAUkB,cAAcD,EAAWjB,IAEtD,IAAK,SACH,OAAOgB,EAAUhB,GAAYiB,EAAWjB,GAE1C,QACE,OAAO,MAKXE,GACFK,EAAcY,UAGTZ,EAS8Ba,CACnCxB,EACAI,EACAE,GAQF,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYvB,IAAaL,EAAS6B,WAEpCC,QAAS,kBAAMxB,EAAYN,EAAS6B,WALtC,iCAUA,wBACEF,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYvB,IAAaL,EAAS+B,SAEpCD,QAAS,kBAAMxB,EAAYN,EAAS+B,SALtC,4BAUA,wBACEJ,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CAAE,YAAarB,IAClDuB,QAAS,kBAAMtB,GAAeD,IAHhC,qBAQCE,GACC,wBACEkB,KAAK,SACLD,UAAU,4BACVI,QAxCc,WACtBxB,EAAYN,EAASI,SACrBI,GAAc,IAmCR,sBAUJ,6BACE,6BACGE,EAAaG,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,EAAKI,MADgBJ,EAAKC,eC5HzCiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3ac02597.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\ntype Good = string;\ntype IsReversed = true | false;\ntype PreparedGood = {\n  id: string;\n  name: string;\n  length: number;\n};\n\nenum SortType {\n  Initial = '',\n  Alphabet = 'name',\n  Length = 'length',\n}\n\nexport const goodsFromServer: Good[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: Good[],\n  sortedBy: SortType,\n  isReversed: IsReversed,\n): PreparedGood[] {\n  const preparedGoods: PreparedGood[] = goods.map((good) => ({\n    id: crypto.randomUUID(),\n    name: good,\n    length: good.length,\n  }));\n\n  if (sortedBy) {\n    preparedGoods.sort((goodFirst, goodSecond) => {\n      switch (sortedBy) {\n        case 'name':\n          return goodFirst[sortedBy].localeCompare(goodSecond[sortedBy]);\n\n        case 'length':\n          return goodFirst[sortedBy] - goodSecond[sortedBy];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortedBy, setSortedBy] = useState<SortType>(SortType.Initial);\n  const [isReversed, setIsReversed] = useState<IsReversed>(false);\n\n  const resetBtnCondition = sortedBy || isReversed;\n\n  const visibleGoods: PreparedGood[] = getPreparedGoods(\n    goodsFromServer,\n    sortedBy,\n    isReversed,\n  );\n\n  const resetAllFilters = () => {\n    setSortedBy(SortType.Initial);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortedBy !== SortType.Alphabet,\n          })}\n          onClick={() => setSortedBy(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortedBy !== SortType.Length,\n          })}\n          onClick={() => setSortedBy(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {resetBtnCondition && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetAllFilters}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map((good) => (\n            <li data-cy=\"Good\" key={good.id}>\n              {good.name}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}